type Tree a b = Leave a | Branch (b, (Tree a b, Tree a b));

(Tree a b) Left((Tree a b) t) {
	match (t) {
		case (Branch i) return fst(snd(i));
	}
}

(Tree a b) Right((Tree a b) t) {
	match (t) {
		case (Branch i) return snd(snd(i));
	}
}

viewTree((Tree a b) t) {
	match (t) {
		case (Leave a) print(a);
		case (Branch i) {
			print(fst(i));
			viewTree(fst(snd(i)));
			viewTree(snd(snd(i)));
	}
}

Void main () {
	(Tree Int Int) n = new Branch(1, (new Branch(2, (new Leave 4, new Leave 5)), new Branch(6, (new Leave 7, new Leave 8))));
	
	print (isNothing(n));
	print (isNothing(o));
	
	viewTree(Left(n));
	print(100);
	viewTree(Right(n));
	print(200);
	viewTree(n);
	print(300);
}
