type Tree a b = Leaf a | Branch (b, ((Tree a b), (Tree a b)));
type Maybe a = Nothing | Just a;

(Maybe (Tree a b)) Left((Tree a b) t) {
	match (t) {
		case (Branch i) return new Just fst(snd(i));
	}
	return new Nothing;
}

(Maybe (Tree a b)) Right((Tree a b) t) {
	match (t) {
		case (Branch i) return new Just snd(snd(i));
	}
	return new Nothing;
}

Void viewTree((Tree a b) t) {
	match (t) {
		case (Leaf a) print(a);
		case (Branch i) {
			print(fst(i));
			viewTree(fst(snd(i)));
			viewTree(snd(snd(i)));
		}
	}
}

Void viewMaybeTree((Maybe (Tree a b)) m) {
	match(m) {
		case (Just a) viewTree(a);
	}
}

Void main () {
	(Tree Int Int) n = new Branch(1, (new Branch(2, (new Leaf 3, new Leaf 4)), new Branch(5, (new Leaf 6, new Leaf 7))));
	
	viewMaybeTree(Left(n));
	print(100);
	viewMaybeTree(Right(n));
	print(200);
	viewTree(n);
	print(300);
}
